import numpy as np
from measurements import get_measurements_from_data

def Compute_eFace(Patient):

    # 1) EyeBrow Elevation at rest
    a_left, a_right = LeftRest.BrowHeight, RightRest.BrowHeight
    if Patient._HealthySide == 'Right':
        Brow_at_rest = a_left/a_right
    else:
        Brow_at_rest = a_right/a_left
    
    Brow_at_rest = np.round(Brow_at_rest*100,1)
    
    
    # 2) Palpebral Fissure width at rest
    c_left, c_right = LeftRest.PalpebralFissureHeight, RightRest.PalpebralFissureHeight

    if Patient._HealthySide == 'Right':
        PalpebralFissure_at_rest = c_right/c_left
    else:
        PalpebralFissure_at_rest = c_left/c_right
    
    PalpebralFissure_at_rest = np.round(PalpebralFissure_at_rest*100,1)
    
    # 3) Oral commissure at rest 
    e_right, d_right = np.sin((RightRest.SmileAngle-90)*np.pi/180)*RightRest.CommissureExcursion, np.cos((RightRest.SmileAngle-90)*np.pi/180)*RightRest.CommissureExcursion
    e_left, d_left = np.sin((LeftRest.SmileAngle-90)*np.pi/180)*LeftRest.CommissureExcursion, np.cos((LeftRest.SmileAngle-90)*np.pi/180)*LeftRest.CommissureExcursion
    if Patient._HealthySide == 'Right':
        #e_left is the disease side
        if e_left < e_right and e_left > 0:
            OralCommissure_at_rest = 1-((e_right - e_left)/e_right)
        else:
            OralCommissure_at_rest = d_left/d_right
    else:
        #e_right is the disease side
        if e_right < e_left and e_right > 0:
            OralCommissure_at_rest = 1-((e_left - e_right)/e_left)
        else:
            OralCommissure_at_rest = d_right/d_left
    
    OralCommissure_at_rest = np.round(OralCommissure_at_rest*100,1)
    